Trie 
class TrieNode{
	TrieNode [] children;
	String word
	//boolean isWord;
}
// insert search and delete time is O(m)  , m is the average length of the string
// basic operations
// search
public boolean search(String word){
	TrieNode cur = root;
	for (int i = 0; i < word.length(); i++){
		TrieNode next = cur.children[word.charAt(i)-'a'];
		if (next == null){
			return false;
		}
		cur = cur.next;
	}
	return cur.isWord; // return true;
}

// insert into the trie
public boolean insert(String word){
	if (search(word)){
		return false;
	}
	TrieNode cur = root;
	for (int i = 0; i < word.length(); i++){
		TrieNode next = cur.children[word.charAt(i) - 'a'];
		if (next == null){
			next = new TrieNode();
			cur.children[word.charAt(i)] = next;
		}
		cur = next;
		cur.count++;
	}
	cur.isWord = true;
}

// delete a TrieNode
public boolean delete(String word){
	if (! search(word)){
		return false;
	}
	TrieNode cur = root;
	for (int i = 0; i < word.length(); i++){
		TrieNode next = cur.children[word.charAt(i) - 'a'];
		next.count--;
		if (next.count == 0){
			cur.children.remove(word.charAt(i));
			return true;
		}
		cur = next;
	}
	cur.isWord = false;
	return true;
}